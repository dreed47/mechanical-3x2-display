substitutions:
  name: 3x2digit-display
  friendly_name: 3x2 Digit Display
  wifi_ssid: WIFI_SSID_HERE
  wifi_password: WIFI_PASSWORD_HERE
  encryption_key: ENCRYPTION_KEY_HERE
  ota_password: OTA_PASSWORD_HERE

dashboard_import:
  package_import_url: github://dreed47/mechanical-3x2-display/src/3x2digit-display-INITIAL.yaml@release

wifi:
  ssid: $wifi_ssid
  password: $wifi_password

esphome:
  name: $name
  friendly_name: $friendly_name
  platform: ESP8266
  board: d1_mini
  project:
    name: 3x2digit.esphome
    version: "1.0"  
  on_boot:
    priority: 600
    then:
      - script.execute: initialize_servos

logger:

globals:
  - id: previous_position
    type: int
    restore_value: no
    initial_value: '0'

api:
  encryption:
    key: $encryption_key
  services:
    - service: set_digits_1_2_angle
      variables:
        digit1_angle: float
        digit2_angle: float
        play_tone: string
      then:
        - lambda: |-
            float level_servo1 = (digit1_angle / 180.0) * 10.0 + 2.5;
            float level_servo2 = (digit2_angle / 180.0) * 10.0 + 2.5;

            ESP_LOGD("custom", "Setting servo1 to angle %f, which corresponds to level %f", digit1_angle, level_servo1);
            ESP_LOGD("custom", "Setting servo2 to angle %f, which corresponds to level %f", digit2_angle, level_servo2);

            id(pwm_output1).set_level(level_servo1 / 100.0);
            id(pwm_output2).set_level(level_servo2 / 100.0);
            
            if (strcmp(play_tone.c_str(), "ascending") == 0) {
              ESP_LOGD("custom", "Playing ascending tone");
              id(play_tone_ascending).execute();
            } else if (strcmp(play_tone.c_str(), "descending") == 0) {
              ESP_LOGD("custom", "Playing descending tone");
              id(play_tone_descending).execute();
            }

    - service: set_digits_3_4_angle
      variables:
        digit1_angle: float
        digit2_angle: float
        play_tone: string
      then:
        - lambda: |-
            float level_servo1 = (digit1_angle / 180.0) * 10.0 + 2.5;
            float level_servo2 = (digit2_angle / 180.0) * 10.0 + 2.5;

            ESP_LOGD("custom", "Setting servo3 to angle %f, which corresponds to level %f", digit1_angle, level_servo1);
            ESP_LOGD("custom", "Setting servo4 to angle %f, which corresponds to level %f", digit2_angle, level_servo2);

            id(pwm_output3).set_level(level_servo1 / 100.0);
            id(pwm_output4).set_level(level_servo2 / 100.0);
            
            if (strcmp(play_tone.c_str(), "ascending") == 0) {
              ESP_LOGD("custom", "Playing ascending tone");
              id(play_tone_ascending).execute();
            } else if (strcmp(play_tone.c_str(), "descending") == 0) {
              ESP_LOGD("custom", "Playing descending tone");
              id(play_tone_descending).execute();
            }

    - service: set_digits_5_6_angle
      variables:
        digit1_angle: float
        digit2_angle: float
        play_tone: string
      then:
        - lambda: |-
            float level_servo1 = (digit1_angle / 180.0) * 10.0 + 2.5;
            float level_servo2 = (digit2_angle / 180.0) * 10.0 + 2.5;

            ESP_LOGD("custom", "Setting servo5 to angle %f, which corresponds to level %f", digit1_angle, level_servo1);
            ESP_LOGD("custom", "Setting servo6 to angle %f, which corresponds to level %f", digit2_angle, level_servo2);

            id(pwm_output5).set_level(level_servo1 / 100.0);
            id(pwm_output6).set_level(level_servo2 / 100.0);
            
            if (strcmp(play_tone.c_str(), "ascending") == 0) {
              ESP_LOGD("custom", "Playing ascending tone");
              id(play_tone_ascending).execute();
            } else if (strcmp(play_tone.c_str(), "descending") == 0) {
              ESP_LOGD("custom", "Playing descending tone");
              id(play_tone_descending).execute();
            }

    - service: play_rtttl_string
      variables:
        tune: string
      then:
        - rtttl.play: !lambda 'return tune;'

ota:
  platform: esphome
  password: $ota_password

output:
  - platform: esp8266_pwm
    pin: GPIO4  # Corresponds to D2
    frequency: 50 Hz
    id: pwm_output1

  - platform: esp8266_pwm
    pin: GPIO5  # Corresponds to D1
    frequency: 50 Hz
    id: pwm_output2

  - platform: esp8266_pwm
    pin: D3  # Corresponds to D3
    frequency: 50 Hz
    id: pwm_output3

  - platform: esp8266_pwm
    pin: D4  # Corresponds to D4
    frequency: 50 Hz
    id: pwm_output4

  - platform: esp8266_pwm
    pin: D5  # Corresponds to D5
    frequency: 50 Hz
    id: pwm_output5

  - platform: esp8266_pwm
    pin: D8  # Corresponds to D8
    frequency: 50 Hz
    id: pwm_output6

  - platform: esp8266_pwm
    pin: D7
    id: buzzer_output

servo:
  - id: my_servo1
    output: pwm_output1
    min_level: 2.5%
    max_level: 12.5%

  - id: my_servo2
    output: pwm_output2
    min_level: 2.5%
    max_level: 12.5%

  - id: my_servo3
    output: pwm_output3
    min_level: 2.5%
    max_level: 12.5%

  - id: my_servo4
    output: pwm_output4
    min_level: 2.5%
    max_level: 12.5%

  - id: my_servo5
    output: pwm_output5
    min_level: 2.5%
    max_level: 12.5%

  - id: my_servo6
    output: pwm_output6
    min_level: 2.5%
    max_level: 12.5%

# Define buzzer as output for RTTTL
rtttl:
  output: buzzer_output

# Set an initial position to wake up the servos
script:
  - id: initialize_servos
    then:
      - delay: 1s
      - lambda: |-
          float initial_angle1 = 75;
          float initial_angle2 = 75;
          float initial_level1 = (initial_angle1 / 180.0) * 10.0 + 2.5;
          float initial_level2 = (initial_angle2 / 180.0) * 10.0 + 2.5;
          id(pwm_output1).set_level(initial_level1 / 100.0);
          id(pwm_output2).set_level(initial_level2 / 100.0);
          id(pwm_output3).set_level(initial_level1 / 100.0);
          id(pwm_output4).set_level(initial_level2 / 100.0);
          id(pwm_output5).set_level(initial_level1 / 100.0);
          id(pwm_output6).set_level(initial_level2 / 100.0);          
      - delay: 1s
      - rtttl.play: "success:d=24,o=5,b=100:c,g,b"

  - id: play_tone_ascending
    then:
      - rtttl.play: "ascending:d=8,o=5,b=140:c,d,e"

  - id: play_tone_descending
    then:
      - rtttl.play: "descending:d=8,o=5,b=140:e,d,c"
 