esphome:
  name: "segment-display-2digit"
  platform: ESP8266
  board: d1_mini
  on_boot:
    priority: 600
    then:
      - script.execute: initialize_servos

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

logger:

api:
  services:
    - service: set_servo_positions
      variables:
        position: int
      then:
        - logger.log:
            format: "GOT HERE!!! position: %d"
            args: [ 'position' ]
        - lambda: |-
            auto map_digit_to_angle = [](int digit) -> float {
              switch (digit) {
                case 0:
                  return 180;
                case 1:
                  return 5;
                case 2:
                  return 23;
                case 3:
                  return 43;
                case 4:
                  return 60;
                case 5:
                  return 80;
                case 6:
                  return 100;
                case 7:
                  return 120;
                case 8:
                  return 140;
                case 9:
                  return 160;
                default:
                  return 0;
              }
            };

            int ones = position % 10;
            int tens = position / 10;

            float angle_servo1 = map_digit_to_angle(ones);
            float angle_servo2 = map_digit_to_angle(tens);

            float level_servo1 = (angle_servo1 / 180.0) * 10.0 + 2.5;
            float level_servo2 = (angle_servo2 / 180.0) * 10.0 + 2.5;

            ESP_LOGD("custom", "Setting servo1 position to %d, which corresponds to %f degrees and %f level", ones, angle_servo1, level_servo1);
            ESP_LOGD("custom", "Setting servo2 position to %d, which corresponds to %f degrees and %f level", tens, angle_servo2, level_servo2);

            id(pwm_output1).set_level(level_servo1 / 100.0);
            id(pwm_output2).set_level(level_servo2 / 100.0);

ota:
  password: !secret ota_password

output:
  - platform: esp8266_pwm
    pin: GPIO4  # Corresponds to D2
    frequency: 50 Hz
    id: pwm_output1

  - platform: esp8266_pwm
    pin: GPIO5  # Corresponds to D1
    frequency: 50 Hz
    id: pwm_output2

servo:
  - id: my_servo1
    output: pwm_output1
    min_level: 2.5%
    max_level: 12.5%

  - id: my_servo2
    output: pwm_output2
    min_level: 2.5%
    max_level: 12.5%

# Set an initial position to wake up the servos
script:
  - id: initialize_servos
    then:
      - delay: 1s
      - lambda: |-
          float initial_angle1 = 90;
          float initial_angle2 = 90;
          float initial_level1 = (initial_angle1 / 180.0) * 10.0 + 2.5;
          float initial_level2 = (initial_angle2 / 180.0) * 10.0 + 2.5;
          id(pwm_output1).set_level(initial_level1 / 100.0);
          id(pwm_output2).set_level(initial_level2 / 100.0);
      - delay: 1s
