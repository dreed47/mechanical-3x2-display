substitutions:
  name: mechanical-thermometer
  friendly_name: Mechanical Thermometer
  
esphome:
  name: $name
  friendly_name: $friendly_name
  platform: ESP8266
  board: d1_mini
  on_boot:
    priority: 600
    then:
      - script.execute: initialize_servos


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

logger:

globals:
  - id: previous_position
    type: int
    restore_value: no
    initial_value: '0'

api:
  encryption:
    key: !secret encryption_key
  services:
    - service: set_servo_positions
      variables:
        position: int
      then:
        - logger.log:
            format: "set_servo_positions api called... position: %d"
            args: [ 'position' ]
        - lambda: |-
            auto map_digit_to_angle = [](int digit) -> float {
              switch (digit) {
                case 0:
                  return 165;
                case 1:
                  return 180;
                case 2:
                  return 20;
                case 3:
                  return 43;
                case 4:
                  return 60;
                case 5:
                  return 75;
                case 6:
                  return 90;
                case 7:
                  return 110;
                case 8:
                  return 135;
                case 9:
                  return 150;
                default:
                  return 0;
              }
            };

            int ones = position % 10;
            int tens = position / 10;

            float angle_servo1 = map_digit_to_angle(ones);
            float angle_servo2 = map_digit_to_angle(tens);

            float level_servo1 = (angle_servo1 / 180.0) * 10.0 + 2.5;
            float level_servo2 = (angle_servo2 / 180.0) * 10.0 + 2.5;

            ESP_LOGD("custom", "Setting servo1 position to %d, which corresponds to %f degrees and %f level", ones, angle_servo1, level_servo1);
            ESP_LOGD("custom", "Setting servo2 position to %d, which corresponds to %f degrees and %f level", tens, angle_servo2, level_servo2);

            id(pwm_output1).set_level(level_servo1 / 100.0);
            id(pwm_output2).set_level(level_servo2 / 100.0);

            // Determine if position increased or decreased and play the corresponding tone
            if (position > id(previous_position)) {
              ESP_LOGD("custom", "Position increased, playing ascending tone");
              id(play_tone_ascending).execute();
            } else if (position < id(previous_position)) {
              ESP_LOGD("custom", "Position decreased, playing descending tone");
              id(play_tone_descending).execute();
            }

            // Update previous position
            id(previous_position) = position;            

    - service: set_servo_angle
      variables:
        angle1: float
        angle2: float
      then:
        - lambda: |-
            float level_servo1 = (angle1 / 180.0) * 10.0 + 2.5;
            float level_servo2 = (angle2 / 180.0) * 10.0 + 2.5;

            ESP_LOGD("custom", "Setting servo1 to angle %f, which corresponds to level %f", angle1, level_servo1);
            ESP_LOGD("custom", "Setting servo2 to angle %f, which corresponds to level %f", angle2, level_servo2);

            id(pwm_output1).set_level(level_servo1 / 100.0);
            id(pwm_output2).set_level(level_servo2 / 100.0);

    - service: play_rtttl_string
      variables:
        tune: string
      then:
        - rtttl.play: !lambda 'return tune;'

ota:
  platform: esphome
  password: !secret ota_password

output:
  - platform: esp8266_pwm
    pin: GPIO4  # Corresponds to D2
    frequency: 50 Hz
    id: pwm_output1

  - platform: esp8266_pwm
    pin: GPIO5  # Corresponds to D1
    frequency: 50 Hz
    id: pwm_output2

  - platform: esp8266_pwm
    pin: D7
    id: buzzer_output

servo:
  - id: my_servo1
    output: pwm_output1
    min_level: 2.5%
    max_level: 12.5%

  - id: my_servo2
    output: pwm_output2
    min_level: 2.5%
    max_level: 12.5%

# Define buzzer as output for RTTTL
rtttl:
  output: buzzer_output

# Set an initial position to wake up the servos
script:
  - id: initialize_servos
    then:
      - delay: 1s
      - lambda: |-
          float initial_angle1 = 75;
          float initial_angle2 = 75;
          float initial_level1 = (initial_angle1 / 180.0) * 10.0 + 2.5;
          float initial_level2 = (initial_angle2 / 180.0) * 10.0 + 2.5;
          id(pwm_output1).set_level(initial_level1 / 100.0);
          id(pwm_output2).set_level(initial_level2 / 100.0);
      - delay: 1s
      - rtttl.play: "success:d=24,o=5,b=100:c,g,b"

  - id: play_tone_ascending
    then:
      - rtttl.play: "ascending:d=8,o=5,b=140:c,d,e"

  - id: play_tone_descending
    then:
      - rtttl.play: "descending:d=8,o=5,b=140:e,d,c"
 